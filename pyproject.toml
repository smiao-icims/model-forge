[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "model-forge-llm"
version = "2.2.1"
description = "A reusable library for managing LLM providers, authentication, and model selection."
readme = "README.md"
requires-python = ">=3.11,<4.0"
license = {file = "LICENSE"}
authors = [
    {name = "ModelForge Contributors"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["llm", "ai", "langchain", "openai", "ollama", "providers", "authentication"]
dependencies = [
    "click>=8.1.7",
    "requests>=2.32.3",
    "langchain-core>=0.3.0",
    "langchain-openai>=0.3.0",
    "langchain-community>=0.3.0",
    "langchain-google-genai>=2.1.5",
    "langchain-github-copilot>=0.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.2.2",
    "pytest-mock>=3.14.0",
    "ruff>=0.7.0",
    "mypy>=1.11.0",
    "pre-commit>=3.8.0",
    "pytest-cov>=5.0.0",
    "types-requests>=2.32.0",
    "twine>=6.1.0",
    "requests-mock>=1.12.1",
]

[project.scripts]
modelforge = "modelforge.cli:cli"

[project.urls]
Homepage = "https://github.com/smiao-icims/model-forge"
Repository = "https://github.com/smiao-icims/model-forge"
Issues = "https://github.com/smiao-icims/model-forge/issues"
Documentation = "https://model-forge.readthedocs.io"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.dynamic]
version = {attr = "modelforge.__version__"}

# === Code Quality Configuration ===

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11+
target-version = "py311"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F", "W", "I", "N", "UP", "ANN", "S", "B", "A", "COM", "C4", "DTZ", "T10", "ISC", "ICN", "PIE", "PT", "Q", "RSE", "RET", "SIM", "TID", "ARG", "PTH", "ERA", "PL", "R", "TRY"]
ignore = [
    "COM812",  # Missing trailing comma (handled by formatter)
    "ISC001",  # Single line implicit string concatenation (handled by formatter)
    "S101",    # Use of assert detected (normal in tests)
    "PLR2004", # Magic value comparison (acceptable for tests)
    "PLR0913", # Too many arguments in function definition (acceptable for CLI)
    "TRY003",  # Avoid specifying long messages outside exception class
    "TRY301",  # Abstract raise to inner function (acceptable for simple error handling)
    "ANN101",  # Missing type annotation for self in method (not needed)
    "PLR0912", # Too many branches (CLI commands need complexity)
    "PLR0915", # Too many statements (CLI commands need complexity)
    "ARG002",  # Unused method argument (common in callbacks/overrides)
    "ANN401",  # Any type (sometimes needed for dynamic code)
    "PLC0415", # Import outside top-level (needed for conditional imports)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Per-file ignores for test files
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ANN101",  # Allow missing type annotation for self in method
    "ANN401",  # Allow Any type in tests (common for mocks)
    "S101",    # Allow assert in tests
    "S105",    # Allow hardcoded passwords in tests (test tokens)
    "S108",    # Allow hardcoded temp paths in tests
    "PT019",   # Allow pytest fixtures without value
    "PLR2004", # Allow magic value comparison in tests
    "TRY002",  # Allow custom exceptions in tests
    "ARG001",  # Allow unused function arguments (common in test fixtures)
    "ARG002",  # Allow unused method arguments (common in test fixtures)
    "PLR0913", # Allow many arguments in test functions
    "E501",    # Allow longer lines in tests (for assertions)
    "ANN001",  # Allow missing type annotations in tests
    "ANN202",  # Allow missing return type annotations in tests
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = false
warn_unreachable = false
strict_equality = true
show_error_codes = true
ignore_missing_imports = true
plugins = []

[[tool.mypy.overrides]]
module = [
    "langchain_core.*",
    "langchain_openai.*",
    "langchain_community.*",
    "langchain_google_genai.*",
    "langchain_github_copilot.*",
    "click.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["modelforge.cli", "modelforge.cli_utils"]
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_decorators = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src/modelforge",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-branch",
]

[tool.coverage.run]
source = ["src/modelforge"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "types-aiofiles>=24.1.0.20250708",
]

# Removed Poetry-specific sections - now using uv
